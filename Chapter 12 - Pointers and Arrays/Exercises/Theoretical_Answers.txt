Exercise 1:
Q. Suppose that the following declarations are in effect:
    int a[] = {5, 15, 34, 54, 14, 2, 52, 72};
    int *p = &a[1], *q = &a[5];
  a. What is the value of *(p+3)?
  b. What is the value of *(q-3)?
  c. What is the value of q - p?
  d. Is the condition p < q true or false?
  e. Is the condition *p < *q true or false?
A. Since p is a pointer that points to the element 1 of the array a, and q points to the element 5 of the array a. The following effects are obsevered when:
  a. *(p + 3) -> p points to the element 1 of the array, adding 3 will make it point to the (1 + 3) -> 4, i.e. element 4 of the array. Since the indirection operator (*) is in use, it will result in fetching the element 4 of the array.
  b. *(q - 3) -> q points to the element 5 of the array, subtracting 3 from q implies that q now points to (5 - 3) -> 2, i.e. element 2 of the array a. Use of the indirection operator make it fetch the data/object stored in the location q is pointing to--the element 2.
  c. q - p -> q stores the address of the element 5 of the array a, and p stores the address for element 1 of the array a. Say that the array has the address as [1000, 1004, 1008, 1012, 1016, 1020, 1024, 1028] (memory address are not stored as decimal, but rather as hex, but it is used for representation purpose. Also, it is assumed that int takes 4 bytes.), and since p stores the value 1004--the address of element 1 in the array--while q stores the value 1020, the result would be 1020 - 1004 -> 16 / 4 -> 4.
  d. The condition p < q is true since p is indeed lesser compared to q. Since the relative position of p is less as compared to the position of q, the inequality operator holds true.
  e. The condition *p < *q is false as *p gives the value 15 (the element 1 of array a that p is pointing to) and *q gives the value 2 (the element 5 of array a that q is pointing to). As 15 is not less than 2, the result of the operation would be 0 (false).

Exercise 2:
Q. Suppose that high, low, and middle are all pointer variables of the same type, and that low and high point to elements of an array. Why is the following statement illegal, and how could it be fixed?
    middle = (low + high) / 2;
A. The following operation is illegal as addition of two pointer variables are not valid operation (see #3 and #6 of Chapter's notes) (also it is an invalid operation to add two (int *) variables). To fix this issue, we need to do the following:
    middle = &arr[n / 2];
  where n is the length of the array, and arr is the array in question. &arr[n/2] gives the middle element of the array and the & (address) operator provides the address of the respective element in the array.

Exercise 3:
Q. What will be the contents of the a array after the following statements are executed?
    #define N 10

    int a[N] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int *p =  &a[0], *q = &a[N-1], temp;

    while (p < q) {
      temp = *p;
      *p++ = *q;
      *q-- = temp;
    }
A. The following data is stored in respective variables:
    1. a -> stores N (10) elements and is an array
    2. p -> stores the pointer to the element 0 of the array a
    3. q -> stores the pointer to the element N - 1 (element 9) of the array a.
  The execution of the while loop is as follows:
    1. First iteration (p < q) is true as the relative position of p is less as compared to the relative position of q.
      -> temp stores the object being pointed by the pointer variable p -> temp = 1
      -> *p++ happens like this -> *(p++) -> p is incremented later, but the value at p's current pointing location is updated to the one stored in *q -> *p = *q -> *&a[0] = 10
      -> p = p + 1 -> p = &a[1] 
      -> *q-- -> *(q--) -> q is decremented later, but first, *q is assigned the value stored in temp. this means *q = 1 -> *&a[9] = 1
      -> q = q - 1 -> q = &a[8]
    2. Second iteration (p < q) is true as p (&a[1]) < q (&a[8])
      -> temp = *p -> temp = *&a[1] -> temp = 2
      -> *p++ = *q -> *(p++) = *&a[8] -> *&a[1] =  9
      -> p = p + 1 -> p = &a[2]
      -> *q-- = temp -> *(q--) = 2 -> *&a[8] = 2
      -> q = q - 1 -> q = &a[7]
    3. Third iteration (p < q) is true as p (&a[2]) < q (&a[7])
      -> temp = *p -> temp = *&a[2] -> temp = 3
      -> *p++ = *q -> *(p++) = *&a[7] -> *&a[2] = 8
      -> p = p + 1 -> p = &a[3]
      -> *q-- = temp -> *(q--) = 3 -> *&a[7] = 3
      -> q = q - 1 -> q = &a[6]
    4. Fourth iteration (p < q) is true as p (&a[3]) < q (&a[6])
      -> temp = *p -> temp = *&a[3] -> temp = 4
      -> *p++ = *q -> *(p++) = *&a[6] -> *&a[3] = 7
      -> p = p + 1 -> p = &a[4]
      -> *q-- = temp -> *(q--) = 4 -> *&a[6] = 4
      -> q = q - 1 -> q = &a[5]
    5. Fifth iteration (p < q) is true as p (&a[4]) < q (&a[5])
      -> temp = *p -> temp = *&a[4] -> temp = 5
      -> *p++ = *q -> *(p++) = *&a[5] -> *&a[4] = 6
      -> p = p + 1 -> p = &a[5]
      -> *q-- = temp -> *(q--) = 5 -> *&a[5] = 5
      -> q = q - 1 -> q = &a[4]
    6. Sixth iteration (p < q) is false as p (&a[5]) < q (&a[4]) is false. So the program will break out of the loop.

  The resulting values in the array are: a = {10, 9, 8, 7, 6, 5, 4, 3, 2, 1}

Exercise 5:
Q. Suppose that a is a one-dimensional array and p is a pointer variable. Assuming that the assignment p = a has just been performed, which of the following expressions are illegal because of mismatched types? Of the remaining expressions, which are true (have a nonzero value)?
    a. p == a[0]
    b. p == &a[0]
    c. *p == a[0]
    d. p[0] == a[0]
A. Since the assignment p = a has been performed. The following things happen:
    a. p == a[0] will be false as p holds the pointer to the element 0 of the array a, but a[0] gives the data stored in the element 0 of the array. This expression can be roughly translated to &a[0] == a[0], which is false.
    b. p == &a[0] will be true as p holds the pointer to the element 0 of the array a while &a[0] also gives the pointer to the element 0 of the array a.
    c. *p == a[0] holds true as p holds the pointer to the element 0, and *p gives the data that the pointer points to.
    d. p[0] == a[0] holds true as the compiler interprets p[0] as *(p+0), where p stores the pointer to the element 0 of the array a.

