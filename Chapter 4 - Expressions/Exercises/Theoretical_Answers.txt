Exercise 2:
Q. If i and j are positive integers, does (-i)/j always have the same value as -(i/j)? Justify your answer.
A. No, (-i)/j does not always have the same value as -(i/j). -(i/j) operation first divides i by j and then puts the minus sign, whereas (-i)/j is more difficult to explain. As described in the QnA section, the goal is to ensure that the value of (i / j) * j + i % j will always be equal to i (provided that the value of i and j are "representable"). If the value of i is 9 and j is 7, thereby making (-i)/j = -9/7, this operation can provide either one of two results; -1 or -2.

Exercise 7:
Q. The algorithm for computing the UPC digit ends with the following steps:
    a. Subtract 1 from total
    b. Compute the remainder when the adjusted total is divided by 10
    c. Subtract the remainder from 9

    It's tempting to try to simplify the algorithm by using these steps instead:
    a. Compute the remainder when the total is divided by 10
    b. Subtract the remainder from 10

    Why doesn't this technique work?
A. The actual opertions are: (9 - ((total - 1) % 10)). But the alternative descirbed is: (10 - (total % 10)). Let's take one example: 0-13800-15173-5, the total is 45 in this case. Now, when we subtract 1 from it, we get 44 and its modulus operation with 10 yields 4. When 4 is subtracted from 9, we get 5 as the result. When we use the latter technique, first we do modulus operation for 45 with 10 obtaining 5. Then we subtract 5 from 10 to get the result of 5. Consider another example: 0-51500-24128-?, here the total obtained is 52 and subtracting 1, we get 51. when divied by 10, the remainder is 1 and when the remainder is subtracted from 9, we get 8 as the final result. Using the alternative approach, we divide 52 by 10 to get the remainder of 2, then we subtract 2 from 10 to obtain the value of 8.

Exercise 13:
Q. Only one of the expression ++i and i++ is exactly the same as (i += 1); which is it? Justify your answer.
A. i += 1 increments the value of i by 1 and then assigns it to the variable i. ++i first increments the value of i by 1 and then fetches the value of i where i++ first fetches the value of i and then increments it by 1 for later statments to use the value of i.

Exercise 14:
Q. Supply parantheses to show how a C compiler would interpret each of the following expressions:
    a. a * b - c * d + e -> (a * b) - (c * d) -> ((a * b) - (c * d))
    b. a / b % c / d -> (a / b) % c / d -> ((a / b) % c) / d -> (((a / b) % c) / d)
    c. - a - b + c - + d -> (- a) - b + c - (+ d) -> ((- a) - b) + c - (+ d) -> (((- a) - b) + c) - (+ d) -> ((((- a) - b) + c) - (+ d))
    d. a * - b / c - d -> a * (- b) / c - d -> (a * (- b)) / c - d -> ((a * (- b)) / c) - d -> (((a * (- b)) / c) - d)
A. Check exercise_14.c to verify the answers.

Exercise 15:
Q. Give the values of i and j after each of the following expression statements has been executed. (Assume that i has the value 1 initially and j has the value 2.)
    a. i += j;
    b. i--;
    c. i * j / i;
    d. i % ++j;
A. The following are the result that is expected to obtain after the statements:
    a. i += j -> i = i + j -> i = 1 + 2 -> i = 3
    b. i-- -> i = 1 -> i = i - 1 -> i = 0 (the new value of i, i.e. i = 0 is not stored as the statment is executed but rather in later statements where i is called.)
    c. ((i * j) / i) -> ((1 * 2) / 1) -> 2 / 1 -> 2
    d. i % ++j -> i % (++j) -> i % (3) -> 1 % 3 -> 1


